<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Doug Schaefer: Using CMake for the ESP32 with the Eclipse C/C++ IDE</title>
	<guid isPermaLink="false">https://cdtdoug.ca/2018/07/02/cdt-for-esp32</guid>
	<link>https://cdtdoug.ca/2018/07/02/cdt-for-esp32.html</link>
	<description>&lt;p&gt;The Photon release of the Eclipse C/C++ IDE now includes support for a number of different build systems. CMake is one of the most popular build systems with open source projects so it was an obvious candidate. The Eclipse CDT project has been working on CMake support for a few years and now it’s ready for wider adoption.&lt;/p&gt;

&lt;p&gt;One of the open source projects using CMake is the Espressif IoT Development Framework, ESP-IDF, an SDK for their inexpensive and highly featured system on a chip, the ESP32. It is widely popular with hobbyists with boards available from a number of vendors. Though CMake support is currently in a feature branch, it is expected their CMake build files will make it to the master branch in the upcoming months.&lt;/p&gt;

&lt;p&gt;This environment is a great example of how the new features in the Eclipse C/C++ IDE automate much of the build and launch process to speed up development on microcontroller projects. We will walk though each of the steps to build an application and get it running on a board and will highlight the new features in Eclipse Photon as we go.&lt;/p&gt;

&lt;h2 id=&quot;environment&quot;&gt;Environment&lt;/h2&gt;

&lt;p&gt;Espressif provides &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/feature-cmake/get-started/index.html&quot;&gt;thorough documentation on how to set up your development environment&lt;/a&gt;. Here’s a quick highlights of what I did for mine. I’m using Windows 10 with CMake, Ninja, and Python 2.7 provided by &lt;a href=&quot;https://scoop.sh/&quot;&gt;scoop&lt;/a&gt;. No MSYS or Cygwin. I use busybox for my shell but Eclipse doesn’t need it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Follow the &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/feature-cmake/get-started/windows-setup-scratch.html&quot;&gt;Setup Windows Toolchain from Scratch&lt;/a&gt; instructions to get the xtensa toolchain and mconf Kconfig utility. Add them to your PATH environment variable.&lt;/li&gt;
  &lt;li&gt;Checkout the features/cmake branch of the ESP-IDF. Make sure you do a recursive checkout to pick up it’s numerous git submodules. Set the IDF_PATH environment variable to the root location of the repo.&lt;/li&gt;
  &lt;li&gt;Install the pyserial Python library for esptool.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we’re ready to fire up Eclipse.&lt;/p&gt;

&lt;h2 id=&quot;cmake-project&quot;&gt;CMake Project&lt;/h2&gt;

&lt;p&gt;In the New C/C++ Project wizard select “Empty or Existing CMake Project” from the list of templates and create a new project. This will create the project but without a CMakeLists.txt or any source files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/NewCMakeProject.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-toolchain&quot;&gt;The Toolchain&lt;/h2&gt;

&lt;p&gt;We now need to tell CDT which toolchain to use when building the project. This will pass the required arguments to CMake when generating the Ninja files.&lt;/p&gt;

&lt;p&gt;In the Preferences, select C/C++ and then CMake to see the list of toolchain files CDT will use with CMake. Click Add. Each CMake toolchain file is associated with a toolchain. Since we have the xtensa toolchain in our PATH, CDT will auto discover it and it will appear in the dropdown. Also enter the location of the esp-idf toolchain file which is in the esp-idf repo under tools/cmake/toolchain-esp32.cmake.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/CMakeToolchain.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-launch-target&quot;&gt;The Launch Target&lt;/h2&gt;

&lt;p&gt;Next we need to tell CDT to use the toolchain for our project. This is accomplished through the Launch Bar, the new widget set you see on the far left of the toolbar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/LaunchBar.png&quot; style=&quot;height: 100px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the third dropdown and select New Launch Target. We need to tell CDT about the target where we’d like to launch our application. We’ll be using the flash loader so select Serial Flash Target. Enter a name for the target, “esp32” as the operating system, “xtensa” as the CPU architecture, and select the serial port your ESP32 device is connected to on your machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/SerialTarget.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The OS and architecture need to match the settings for the toolchain. You can see those settings in the Preferences by selecting C/C++ and Core Build Toolchains. For GCC toolchains, CDT autodetects those settings by asking GCC for it’s target triple.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/Toolchains.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;build&quot;&gt;Build&lt;/h2&gt;

&lt;p&gt;For this first project, we’ll use the Hello World example from the ESP-IDF. It is found in the examples/get-started/hello_world. Copy the contents of this directory into your project. Since we’re using CMake you can delete the Makefile and the main/component.mk files to prove you’re using CMake.&lt;/p&gt;

&lt;p&gt;Notice that the Launch Bar shows Run Hello World on ESP32. When you click the Build button, it will run a build of that project for the ESP32 Launch Target in Run mode, the only one available for the ESP32 for now, and will make sure the right toolchain and CMake toolchain file are used in the build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/Build.png&quot; style=&quot;height: 200px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;terminal&quot;&gt;Terminal&lt;/h2&gt;

&lt;p&gt;To see what our program does, we need to see the output from the serial port. I have an Adafruit Huzzah32 which uses USB to both power the board while in development and to talk over the serial port. We’ll use the Eclipse Terminal to connect to that serial port. Click the Terminal toolbar button and select Serial Terminal as the terminal type and complete the rest of the settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/Terminal.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;launch&quot;&gt;Launch&lt;/h2&gt;

&lt;p&gt;To get the app running on the board, we need to download it over the USB serial port and burn it into the flash memory on the device. The ESP-IDF has a tool for that called esptool. The IDF also has a nice wrapper script that manages flashing as well as a number of other handy operations.&lt;/p&gt;

&lt;p&gt;To hook it up, we need to set up the launch configuration. This is where the Launch Bar shines. Click on the gear next to your project in the middle selector. It will open a launch configuration edit dialog. Since our target type is Serial Launch Target, it has a simple launch that executes an external tool. We’ll set it up to run python with the idf.py script and set the build directory and serial port and ask it to flash.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/LaunchConfig.png&quot; style=&quot;height: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you had a program running on your chip you’ll notice in the Terminal that it stopped printing there. The CDT has noticed that your launch target and the terminal are using the same serial port and pauses the terminal while the python script runs. This is especially important on Windows since only one program may control the serial port at a time. Once it starts up again, you see the output of your program. This makes it very easy to iterate changes.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The Eclipse Photon release of the C/C++ IDE is the culmination of a number of years of work on the Launch Bar and CDT’s new Core Build system that gives us CMake and makes it easy to integrate other build and launch tools. Bringing these tools together and having them work together to accellerate development is what Integrated Development Environments are all about.&lt;/p&gt;</description>
	<pubDate>Mon, 02 Jul 2018 18:00:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EclipseSource Oomph Profile – updated to Photon</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=39731</guid>
	<link>https://eclipsesource.com/blogs/2018/07/02/eclipsesource-oomph-profile-updated-to-photon/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Last week, Eclipse Photon has been released, a new version of the Eclipse IDE and platform. It contains many useful improvements, so it is worth to update.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;One of many noteworthy extensions is the new support for code mining. In case you wonder what that is (you do not even find a definition on wikipedia), let us quickly introduce this new feature. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The general idea is to add additional information to a source code editor, which is not code or a comment. That means, this information is not stored in the underlying file, but it augments the text editor during runtime. In fact, you cannot only add information, but also actions, essentially buttons, that can trigger context related behavior.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Let us look at an example: In the following screenshot, you see a test case, which is augmented via code mining. For every test, it shows the state of the last test run, as well as two “buttons” (run and debug) to trigger another execution of the test. The same is available for the test class (e.g. “run all”). The screenshot also shows another example for code mining. The parameter passed into the Junit method fail() is augmented by the type and the name, as defined in the signature of fail().&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EclipseSource Oomph Profile - updated to Photon&quot; class=&quot;alignnone wp-image-39732 size-full&quot; height=&quot;322&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/07/image1.png&quot; width=&quot;395&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please note, that Eclipse itself does not provide any use cases of code mining, but it provides the ability to plugin code mining applications. The examples shown above are from the JDT Code Mining plugin, which &lt;/span&gt;&lt;a href=&quot;https://github.com/angelozerr/jdt-codemining&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;can be found on Github&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. It allows to turn specific code mining applications on or off, depending on how useful you consider them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Code Mining is a very interesting new feature an we look forward to new ideas and use cases that developers might add. Given the well-proven extension mechanism of Eclipse, it is relatively low effort to implement custom code mining extensions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Further general improvements of the Eclipse Photon release are summarized in the following video, Java and Maven improvements in a separate video below.  Both are provided by Holger Voormann, whom we want to thank you for this great work!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As always, in case you use our EclipseSource Oomph profile (see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2015/08/17/introducing-the-eclipsesource-oomph-profile/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for more details), you should get a notification and Oomph will apply the update automatically. If you do not get the notification, just navigate to the menu entry “Help” =&amp;gt; “Perform Set-Up Task”. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This will automatically update all plugins to Photon, but keep all existing settings untouched.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Have fun with Eclipse Photon!&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 02 Jul 2018 14:45:03 +0000</pubDate>
</item>
<item>
	<title>Karsten Thoms: Touring the Eclipse Photon DemoCamps – Next stop: Eindhoven, NL, July 4th!</title>
	<guid isPermaLink="false">http://kthoms.wordpress.com/?p=1015</guid>
	<link>https://kthoms.wordpress.com/2018/07/02/touring-the-eclipse-photon-democamps-next-stop-eindhoven-nl-july-4th/</link>
	<description>&lt;p&gt;Eclipse DemoCamps are a wonderful format to learn the hottest new stuff from all the bandwidth of Eclipse projects: Core IDE, IoT, Smart Home, Modeling, JakartaEE, MicroProfile, Tools and so on. It is also a great way to get in touch with creators, committers, influencers and users of these technologies.&lt;/p&gt;
&lt;p&gt;For this DemoCamp season I am promoting the &lt;a href=&quot;https://projects.eclipse.org/projects/eclipse.platform/who&quot;&gt;Eclipse Platform Project&lt;/a&gt; and thus the &lt;a href=&quot;https://www.eclipse.org/photon/&quot;&gt;Eclipse Photon IDE&lt;/a&gt;. Eclipse Photon comes with a plethora of new features and improvements which are hard to compress into a DemoCamp format. Usually presentations in DemoCamps are just 20 minutes. Attendees should get an overview of multiple projects and interesting stuff with a wide range of topics. And since DemoCamps are in the evenings, attendees want to get entertained and not bored by long talks. The focus is on real demos, live coding and networking. I love to do that.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;screenshot 178.png&quot; class=&quot;alignnone size-full wp-image-1016&quot; src=&quot;https://kthoms.files.wordpress.com/2018/07/screenshot-178.png?w=584&quot; /&gt;&lt;/p&gt;
&lt;p&gt;My talk is named “&lt;strong&gt;&lt;em&gt;Approaching Light Speed – News from the Eclipse Photon Platform&lt;/em&gt;&lt;/strong&gt;“. &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/approaching-light-speed-news-eclipse-photon-platform&quot;&gt;I have given this talk already at EclipseCon France&lt;/a&gt;, at the &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Zurich&quot;&gt;DemoCamps in Zurich&lt;/a&gt; and &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Darmstadt&quot;&gt;Darmstadt&lt;/a&gt;, and internally at our itemis headquater before our yearly company wide party called &lt;em&gt;&lt;a href=&quot;https://blogs.itemis.com/de/arbeiten-bei-itemis-feiern-geh%C3%B6rt-dazu&quot;&gt;itemis SummerCon&lt;/a&gt;&lt;/em&gt;. I have prepared quite a bunch of stuff to talk about. But different then usually, I do not perform live coding, but show coding with small screencasts in my presentation. For this talk I would have to switch too many between different code and workspaces, and comparisons to the previous version Eclipse Oxygen would make this even worse. It is just too confusing if I would switch so often. And would take much longer so I could present not that much.&lt;/p&gt;
&lt;p&gt;At EclipseCon France I had 35 minutes for the talk, and even for that I had strip down the material I already had. The new supported Java versions 9 and 10 in JDT I could just scratch at surface level, although this is one of the real major things in Eclipse Photon. But platform improvements are that much that JDT has to be put into background. For a DemoCamp talk in 20 minutes challenges become bigger. However, in Zurich and Darmstadt I had only those 20 minutes and I thing I managed to give a smooth and interesting presentation. The attendees I spoke afterwards were impressed from all the great stuff that comes with the Eclipse Photon IDE and made them hungry to finally get Photon and use it for their work. Last week on June 27th it was finally time for the great release!&lt;/p&gt;
&lt;p&gt;My next stop is now the &lt;strong&gt;&lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Eindhoven&quot;&gt;DemoCamp in Eindhoven this Wednesday on July 4th 2018&lt;/a&gt;.&lt;/strong&gt; This DemoCamp will be held at the office from &lt;a href=&quot;https://www.altran.com/nl/en/&quot;&gt;Altran&lt;/a&gt; and is organized by my former colleague Niko Stotz. This will be the first Eclipse DemoCamp held in Eindhoven, and maybe the first in the Netherlands (I don’t remember if one was already in the Netherlands so far). I am interested how engaged the developer community in and around Eindhoven is and hope for Niko that many interested people are making their way to the event!&lt;/p&gt;
&lt;p&gt;My colleague and friend Holger Schill will present the new and noteworthy features of the new &lt;a href=&quot;https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/2018/05/23/version-2-14-0&quot;&gt;Xtext 2.14 release&lt;/a&gt; that ships with Eclipse Photon. Last week we showed this in the webinar &lt;em&gt;“&lt;a href=&quot;https://www.meetup.com/de-DE/Virtual-Eclipse-Community-MeetUp/events/251050425/&quot;&gt;Eclipse Photon Series: What’s New in the Eclipse Xtext 2.14?&lt;/a&gt;“&lt;/em&gt;, which got &lt;a href=&quot;https://www.youtube.com/watch?v=Isxverh09e4&quot;&gt;recored on YouTube&lt;/a&gt;. If you want the information given there in 60 minutes condensed, make sure to visit the DemoCamp! Further you will see the wonderful Mélanie Bats. She will present all the new features in &lt;a href=&quot;https://www.eclipse.org/sirius/&quot;&gt;Eclipse Sirius 6&lt;/a&gt;. Besides all the news from the modeling technologies Marc Hamilton is showing how they use the Eclipse Modeling technology stack (Xtext, Sirius, EMF and others) at Altran to build solutions with them.&lt;/p&gt;
&lt;p&gt;So, my fellow software engineers &amp;amp; craftsmen in the Netherlands, &lt;a href=&quot;https://eclipse.altran.nl/&quot;&gt;register for the Eindhoven DemoCamp&lt;/a&gt; now and see you there!&lt;/p&gt;</description>
	<pubDate>Mon, 02 Jul 2018 14:42:31 +0000</pubDate>
</item>
<item>
	<title>Melanie Bats: Sirius 6</title>
	<guid isPermaLink="true">http://melb.enix.org/2018/07/02/futur-of-modeling-tools/</guid>
	<link>http://melb.enix.org/2018/07/02/futur-of-modeling-tools/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/sirius/&quot;&gt;Eclipse Sirius&lt;/a&gt; is a framework to easily and quickly create a graphical modeling workbench dedicated to your domain specific language.&lt;/p&gt;

&lt;p&gt;This year at &lt;a href=&quot;https://www.obeo.fr/en&quot;&gt;Obeo&lt;/a&gt;, we started working on two aspects: &lt;strong&gt;prepare the future of Sirius&lt;/strong&gt; &amp;amp; provide &lt;strong&gt;new features for the upcoming 6.0&lt;/strong&gt; release which is part of the Photon release train.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ready for Photon? Sirius 6.0 is there for you!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have added several new features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Support for background color on diagrams&lt;/strong&gt;: it is now possible to dynamically compute the color of the diagram according to the state of the model. This is a small feature, but it continues to expand the visual customization capabilities available to specifiers.
&lt;img alt=&quot;Background color on diagrams&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/diagram_background.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;New “magic” edge creation tool&lt;/strong&gt;: All diagrams will now benefit for free from a new smart edge creation tool. Thanks to this end users no longer have to chase for the appropriate tool in the palette (which can contain many entries): just click on the source and target of the edge to create and Sirius will automatically detect which tools can be applied to them. If there is only one, the edge is created immediately. If several tools are possible as is the case of the animation, a menu opens to choose among the candidate tools.
&lt;img alt=&quot;New “magic” edge creation tool&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/runtime_sirius_demo2.gif&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Quick navigation to service method implementation&lt;/strong&gt;: Real-world modelers often need to call into Java code to perform complex operations on models or call into Sirius and Eclipse APIs. This is very straightforward to do in Sirius with the notion of Java services that can be transparently invoked from AQL expressions. It is now possible to navigate from the expressions in the Sirius specification which invoke a service method directly into the corresponding Java code with a single keystroke.
&lt;img alt=&quot;Quick navigation to service method implementation&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/runtime_sirius_demo.gif&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Integration with ELK for improved diagram layouts&lt;/strong&gt;: Sirius has always proposed an automatic layout algorithm. Specifiers can now leverage the high-quality layout algorithms provided by the Eclipse ELK project. You can choose any of the algorithms proposed by ELK and tweak all their configuration parameters in the Sirius specification. The end users will transparently get a nicer layout when using the existing “Arrange All” action. This is experimental in Sirius 6.0. Give us feedback on which aspects to focus on for the future.
&lt;img alt=&quot;Integration with ELK for improved diagram layouts&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/runtime_sirius_sm.png&quot; /&gt;
&lt;img alt=&quot;Override ELK options&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/override_options.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What’s next&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;We are working on what would be the future of modeling tools. We already gathered 
some feedback from the community. You expect that modeling in the future would be: &lt;strong&gt;fast, simple, easy, beautiful, cloud &amp;amp; collaborative&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We believe that the concept of IDE is evolving. In the future, we will have more accessible tools and better tool integration. In the end, we think that tools should become IDE agnostic.  We will have more and more tools dedicated to specific domains. These tools would be available more broadly, for various kind of users on any kind of platforms. We need frameworks to ease the creation of such specific tools dedicated to one usage. That’s why we believe in frameworks such as Sirius.&lt;/p&gt;

&lt;p&gt;Sirius is a really nice framework to create dedicated desktop workbenches based today on the Eclipse platform. Our purpose is to bring the spirit of Sirius to the cloud: easily develop modeling workbenches but rendered in a browser and integrable in any web application.&lt;/p&gt;

&lt;p&gt;So where are we today? We are going step by step and work on different aspects.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Introduce web technologies in existing Eclipse views&lt;/strong&gt;: Our first step is to introduce web technologies in existing Eclipse views. This approach is used to provide a brand new feature in Sirius 6.0 called Workflow which allows specifiers to guide users through the usage of their workbench. On the left of the following screenshot, we see a Sirius configuration file which defines a workflow with different actions using this new DSL. To the end-user, these are rendered as web elements inside the Eclipse view. Note that this new feature is still experimental in 6.0, and will be improved for version 6.1 this fall.
&lt;img alt=&quot;Web components in Eclipse view&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/webcomponents_sm.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make Sirius independent from Eclipse platform&lt;/strong&gt;: The idea is to make the Sirius code base more modular, isolating the core business concerns from the current Eclipse-based technology stack: the Eclipse UI, GMF, the workspace, and even the Eclipse Runtime itself. We will work on this progressively over several versions, making sure Sirius always keeps working even in the classical Eclipse-based context. The end goal is to get a set of core components that can be reused both in Eclipse and, more to the point, inside a web server exposing its services to any web client through a well-defined protocol.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/Ua3-93O3TRs&quot;&gt;Render Sirius diagrams in a browser&lt;/a&gt;&lt;/strong&gt;: Based on a classical Sirius configuration, we can render in a browser the graphical elements of a diagram. As usual, the specifier can work on the look and feel of his modeler iteratively. This prototype is based on Sprotty. Sprotty is a new project proposed to the Eclipse Foundation by TypeFox. It is a small, lightweight, open source &amp;amp; well architectured JavaScript graphical library providing rendering in SVG &amp;amp; well integrated with Eclipse ELK which provides auto-layout.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sirius integrated with Cloud IDEs&lt;/strong&gt;: Sirius in a near future will be IDE-agnostic. Then you will be able to integrate Sirius based workbenches in any web application or any IDE. Have a look at the prototypes we already have of Sirius integrated in Eclipse Theia and of Sirius integrated in Eclipse Che.
&lt;img alt=&quot;Sirius integrated with Cloud IDEs&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/sirius_components_sm.png&quot; /&gt;
To sum up, we will keep working on the existing Sirius project and we will reintegrate the new web-related features and components. This summer we will continue our work on the modularization of the architecture. And for the 6.1 this fall, we will contribute a first version of web based diagrams based on the Graphical Server Protocol. 
&lt;img alt=&quot;Sirius timeline&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/diagram_workflow.png&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At Obeo, we’re taking a community-first approach to influence the development of the next generation of modeling tools. Please tell us what you want! We have lots of ideas for the future of Sirius. But what we need is to know what YOU need. So please Speak Up!&lt;/p&gt;</description>
	<pubDate>Mon, 02 Jul 2018 10:00:00 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Simplified database transaction management with the Vert.x RxJava API</title>
	<guid isPermaLink="true">https://vertx.io/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api</guid>
	<link>https://vertx.io/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api</link>
	<description>&lt;article&gt;&lt;p&gt;&lt;em&gt;TL;DR As of 3.5, managing database transactions with Vert.x requires a lot of boilerplate code.&lt;/em&gt;
&lt;em&gt;Vert.x 3.6 will provide helpers and &lt;code&gt;Observable&lt;/code&gt; transformers to easily make a reactive flow transactional.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;simple-queries-with-the-rxified-api&quot;&gt;Simple queries with the &lt;em&gt;“Rxified”&lt;/em&gt; API&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://vertx.io/docs/vertx-rx/java2/&quot;&gt;Vert.x API for RxJava&lt;/a&gt; is one of the most popular modules in the Vert.x stack.&lt;/p&gt;
&lt;p&gt;So we make sure the &lt;em&gt;“Rxified”&lt;/em&gt; API is easy to use for common programming tasks, such as reading rows from a relational database and sending the result to the client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;dbClient.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name, duration FROM tracks WHERE album = 'The Israelites'&quot;&lt;/span&gt;)
  .map(ResultSet::getResults)
  .map(rows -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
  })
  .subscribe(json -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
  }, t -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
  });&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;managing-transactions-with-vert-x-3-5&quot;&gt;Managing transactions with Vert.x 3.5&lt;/h2&gt;
&lt;p&gt;But very often, developers have to implement complex interactions with the database, running inside a single transaction.
To do so, the implementation must follow this process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get a connection from the pool,&lt;/li&gt;
&lt;li&gt;start a transaction,&lt;/li&gt;
&lt;li&gt;execute queries,&lt;/li&gt;
&lt;li&gt;if all queries succeed, commit the transaction,&lt;/li&gt;
&lt;li&gt;otherwise, rollback the changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How does that translate to code?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Get a connection from the pool&lt;/span&gt;
dbClient.rxGetConnection().flatMap(sqlConnection -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Setting auto-commit mode to false implicitely starts a transaction&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxSetAutoCommit(&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;)
    .andThen(
      &lt;span class=&quot;hljs-comment&quot;&gt;// Database queries&lt;/span&gt;
      sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO albums (name) VALUES ('The Israelites')&quot;&lt;/span&gt;)
        .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')&quot;&lt;/span&gt;))
        .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')&quot;&lt;/span&gt;))
        .andThen(sqlConnection.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM tracks WHERE album = 'The Israelites'&quot;&lt;/span&gt;).map(ResultSet::getResults))
    )
    &lt;span class=&quot;hljs-comment&quot;&gt;// Commit if all queries succeed&lt;/span&gt;
    .flatMap(rows -&amp;gt; sqlConnection.rxCommit().andThen(Single.just(rows)))
    .onErrorResumeNext(throwable -&amp;gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// On error, rollback the changes&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxRollback().onErrorComplete()
        .andThen(sqlConnection.rxSetAutoCommit(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;).onErrorComplete())
        .andThen(Single.error(throwable));
    }).flatMap(rows -&amp;gt; sqlConnection.rxSetAutoCommit(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;).andThen(Single.just(rows)))
    .doFinally(sqlConnection::close);
}).map(rows -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
}).subscribe(json -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
}, t -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is a lot of boilerplate around the specific database queries…
It would be better to relieve the developer from maintaining it.&lt;/p&gt;
&lt;h2 id=&quot;vert-x-3-6-tools-for-transaction-management&quot;&gt;Vert.x 3.6 tools for transaction management&lt;/h2&gt;
&lt;p&gt;That is why Vert.x 3.6 will provide &lt;em&gt;&lt;code&gt;Observable&lt;/code&gt; transformers&lt;/em&gt; that can be applied to reactive flows with &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/io/reactivex/Flowable.html#compose-io.reactivex.FlowableTransformer-&quot;&gt;&lt;code&gt;compose&lt;/code&gt;&lt;/a&gt; to make them transactional:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txFlowableTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txObservableTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txSingleTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txMaybeTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txCompletableTransformer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These &lt;em&gt;transformers&lt;/em&gt; wrap the corresponding source of events with SQL transaction management.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;dbClient.rxGetConnection().flatMap(sqlConnection -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO albums (name) VALUES ('The Israelites')&quot;&lt;/span&gt;)
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM tracks WHERE album = 'The Israelites'&quot;&lt;/span&gt;).map(ResultSet::getResults))
    .compose(SQLClientHelper.txSingleTransformer(sqlConnection))
    .doFinally(sqlConnection::close);
}).map(rows -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
}).subscribe(json -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
}, t -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Source &lt;em&gt;transformers&lt;/em&gt; provide maximum flexibility: you are still able to execute operations with the connection after the transaction completes.&lt;/p&gt;
&lt;p&gt;However, you usually do not need the connection after the changes are &lt;em&gt;commited&lt;/em&gt; or &lt;em&gt;rollbacked&lt;/em&gt;.
In this case, you may simply create you source observable with one of the transactional helper methods in &lt;code&gt;io.vertx.reactivex.ext.sql.SQLClientHelper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s rewrite the previous example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;SQLClientHelper.inTransactionSingle(client, sqlConnection -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO albums (name) VALUES ('The Israelites')&quot;&lt;/span&gt;)
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM tracks WHERE album = 'The Israelites'&quot;&lt;/span&gt;).map(ResultSet::getResults))
}).map(rows -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
}).subscribe(json -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
}, t -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;give-it-a-try&quot;&gt;Give it a try&lt;/h2&gt;
&lt;p&gt;Vert.x 3.6 is expected around fall, but the code is already in master and &lt;em&gt;snapshots&lt;/em&gt; are regularly published to Sonatype’s OSS repos.&lt;/p&gt;
&lt;p&gt;So give it a try and feel free to provide your feeback on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Christopher Guindon: Eclipse Marketplace Client, Photon Edition not opening in certain cases</title>
	<guid isPermaLink="true">https://www.chrisguindon.com/post/marketplace-client-not-opening-in-photon/</guid>
	<link>https://www.chrisguindon.com/post/marketplace-client-not-opening-in-photon/</link>
	<description>&lt;p&gt;The Eclipse Marketplace Client, Photon edition has a bug where it fails to open in certain cases. If nothing happens when you try to access the Eclipse Marketplace via &lt;strong&gt;“Help &amp;gt; Eclipse Marketplace”&lt;/strong&gt;, please update the Marketplace Client plug-in by doing the following:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Marketplace Client not opening in Photon&quot; src=&quot;https://www.chrisguindon.com/images/06-marketplace/mpc-update.png&quot; title=&quot;Marketplace Client not opening in Photon&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to Help &amp;gt; Install New Software&lt;/li&gt;
&lt;li&gt;Paste the Marketplace Client update site url into the “Work with” field: &lt;strong&gt;&lt;a href=&quot;http://download.eclipse.org/mpc/photon&quot;&gt;http://download.eclipse.org/mpc/photon&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select the “EPP Marketplace Client” checkbox&lt;/li&gt;
&lt;li&gt;Follow the wizard and restart your Eclipse to finish the installation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are working on providing an update to the Eclipse Photon release to distribute the fix through automatic updates and package downloads. In the meantime, please update manually if you are affected by this bug.&lt;/p&gt;

&lt;p&gt;If you have any questions about this update process, please send an email to &lt;a href=&quot;mailto:mpc-dev@eclipse.org&quot;&gt;mpc-dev@eclipse.org&lt;/a&gt;. For more technical details, see &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=536385&quot;&gt;bug 536385&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Blog post co-authored with &lt;a href=&quot;https://www.eclipse.org/user/creckord&quot;&gt;Carsten Reckord&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus’s Photonic 4.0!</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1106</guid>
	<link>https://papyrusuml.wordpress.com/2018/06/28/papyruss-photonic-4-0/</link>
	<description>&lt;p&gt;It had to happen: &lt;strong&gt;Papyrus is now available at version 4.0&lt;/strong&gt;! That’s Papyrus “Photon” for those of you who follow the Eclipse release names.&lt;/p&gt;
&lt;p&gt;Curious about what was done in this release? You can find that in the &lt;a href=&quot;https://projects.eclipse.org/projects/modeling.mdt.papyrus/releases/4.0.0/bugs&quot;&gt;list of addressed issues&lt;/a&gt; (a.k.a., the bug list). The following topics are addressed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new preference has been introduced to keep stereotype application with their base element see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/StereotypeApplication_Preference&quot;&gt;StereotypeApplication Preference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The hyperlink navigation has changed see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/Hyperlink_Navigation&quot;&gt;Hyperlink Navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a preference page to configure the visualization of  external decorator  see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/External_Decorator&quot;&gt;External Decorator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add auto-completion to select the type in the property view see  &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/Auto_complete_type&quot;&gt;Auto complete type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add an export to HTML to see model without papyrus see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/HTML_Export&quot;&gt;HTML Export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Development and adaptation of the Layer tool for the diagrams &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Oxygen_Work_Description/NewFeature/Layers&quot;&gt;Layers&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;Synchronization with ELK see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/ELK&quot;&gt;ELK adaptation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tables improvements:
&lt;ul&gt;
&lt;li&gt;display of a string instead of N/A&lt;/li&gt;
&lt;li&gt;Matrix improvements&lt;/li&gt;
&lt;li&gt;save by UUID not the positon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Diagrams improvements:
&lt;ul&gt;
&lt;li&gt;some problems about the name label of ports have been fixed&lt;/li&gt;
&lt;li&gt;some resize action in the class diagram have been fixed.&lt;/li&gt;
&lt;li&gt;sequence diagram – Better movement  management of Elements, introduction of combined fragment, RCPTT tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; Integrate a  tool to adapt your model based on the modification of the profile&lt;/li&gt;
&lt;li&gt;Architecture framework : stabilization (easier customizations/modifications by the users) and bug corrections&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Want to try it out? Here are a few links to help you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://download.eclipse.org/modeling/mdt/papyrus/updates/releases/photon/&quot;&gt;Update site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/papyrus/download.html#rcp&quot;&gt;RCP &lt;/a&gt;(With the “RCP*”, you can just download and run!)&lt;/li&gt;
&lt;li&gt;And of course you could stil use the &lt;a href=&quot;https://www.eclipse.org/downloads/eclipse-packages/index.php&quot;&gt;Eclipse Installer&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;(* In case you were wondering, “RCP” stands for “Rich Client Platform &lt;img alt=&quot;😉&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 28 Jun 2018 19:18:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Take Your Code to the Next Level With Eclipse Photon</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/mbSb135JP7Y/take-your-code-next-level-eclipse-photon</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/mbSb135JP7Y/take-your-code-next-level-eclipse-photon</link>
	<description>Join over 4 million active users of the Eclipse IDE and take your coding to the next level with Eclipse Photon.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/mbSb135JP7Y&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 28 Jun 2018 17:00:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Forms and EMF Client Platform 1.17.0 released!</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=39713</guid>
	<link>https://eclipsesource.com/blogs/2018/06/28/emf-forms-and-emf-client-platform-1-17-0-released/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We are happy to announce that with the Photon release train, we have also shipped  &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/ecp/emfforms&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EMF Forms&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/ecp&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EMF Client Platform&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; 1.17.0! &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We want to thank our continuously active team of &lt;/span&gt;&lt;b&gt;10 contributors &lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(&lt;/span&gt;&lt;b&gt;40 contributors&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; overall) for completing on &lt;a href=&quot;https://bugs.eclipse.org/bugs/buglist.cgi?bug_status=UNCONFIRMED&amp;amp;bug_status=NEW&amp;amp;bug_status=ASSIGNED&amp;amp;bug_status=REOPENED&amp;amp;bug_status=RESOLVED&amp;amp;bug_status=VERIFIED&amp;amp;bug_status=CLOSED&amp;amp;classification=Modeling&amp;amp;component=Common&amp;amp;component=Editor&amp;amp;component=EMF%20Forms&amp;amp;component=Model%20Workspace&amp;amp;component=Navigator&amp;amp;component=Validation&amp;amp;list_id=17638428&amp;amp;product=ECP&amp;amp;query_format=advanced&amp;amp;target_milestone=1.17.0&quot;&gt;57 bug fixes and features&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. EMF Forms continues to be one of the most active projects at Eclipse.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We are thankful for all the feedback from our very active group of adopters, for which we have &lt;/span&gt;&lt;b&gt;an additional improvement to announce&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;During the 1.17.0 release cycle, we were talking with contributors and adopters about how to ease the adoption of new versions. While new features in EMF Forms are typically developed as optional additions, there are obviously always some fixes and changes that affect the existing default behavior. As EMF Forms is by definition a user visible framework, even small changes in a new version can sometimes have an unexpected effect in adopter projects. As an example ordering elements alphabetically in a list dialog by default can be considered to be a bug fix for a certain adopter project. For another adopter, this change could cause a regression, as the existing “undefined” order was good for them. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As another example, showing descriptive tooltips on table column headers might sound like an improvement. However, this change is bad if you never refined the underlying attribute descriptions. This “improvement” makes the string visible, which is not really comprehensible by end-users (see screenshot below for an example). Again, an “improvement” can cause unwanted behavior.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EMF Forms and EMF Client Platform 1.17.0 released!&quot; class=&quot;wp-image-39715 size-full aligncenter&quot; height=&quot;103&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/06/image26.png&quot; width=&quot;389&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;While we always try to avoid changes to the default behavior and make new things optional, sometimes changes to core components make sense and are an improvement for most adopters. In any case, the developer team cannot possibly foresee all consequences of a change in all adopters projects. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;However, due to the high development activity of EMF Forms, it is quite some effort for adopters to browse all fixed bug reports of a release to find relevant changes. Therefore, we decided to improve the communication about those kind of changes. To achieve this, we introduced the usage of a new keyword on our Bug Reports: “&lt;/span&gt;&lt;b&gt;Test&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;”.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The tag is to be used:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;when the default behavior of a component has changed, even if they are considered an improvement&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;when a new feature has been added which is enabled by default&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Any changes and adaptations of visible UI elements, even if they are considered an improvement&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Non-trivial refactorings with a risk for regressions&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Of course all of the above mentioned criteria are subject to interpretation, more details can be found in &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/ecp/emfforms/gettinginvolved.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;our contributions guideline&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. In general, the “&lt;/span&gt;&lt;b&gt;Test&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;” keyword highlights bug reports, which should definitely be looked at and tested in detail by all adopters, when they update to a new version.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We hope this helps all adopters, we are of course happy for any feedback on this. Finally, please note that we introduced the keyword during our last development cycle, so 1.17.0 is not fully triaged yet. Therefore, please consider to tag a bug report with the “Test” keyword yourself, if the change has an unexpected effect in your project so that other adopters can benefit from your findings.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Further, kindly continue to ask questions &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/forums/index.php/f/19/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;in the newsgroup&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=ecp&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;file Bug Reports&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In case you don’t know EMF Forms: It is a framework focused on the creation of form-based UIs. EMF Client Platform is designed to support the development of applications based on an EMF data model. If you are not yet familiar with EMF Forms, please refer to &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/tutorials/getting-started-with-EMF-Forms/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for an introduction.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Both of these frameworks are part of the Eclipse Modeling Tools Photon package, but you can also find the new release on our download pages:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;http://eclipse.org/ecp/download.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Download EMF Client Platform&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;http://eclipse.org/ecp/emfforms/download.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Download EMF Form&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As always, we will also blog about new features of the EMF Forms / ECP 1.17.0 release in the upcoming weeks! Please follow this blog or follow us on twitter to get notified about the new posts.&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 28 Jun 2018 10:55:09 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Photon Release of Eclipse IDE Ships With Full Rust Support</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/bSAFj43Kl2g/New-Photon-Release-of-Eclipse-IDE-Ships-With-Full-Rust-Support.html</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/bSAFj43Kl2g/New-Photon-Release-of-Eclipse-IDE-Ships-With-Full-Rust-Support.html</link>
	<description>The Eclipse Foundation today announced the Eclipse Photon simultaneous release.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/bSAFj43Kl2g&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 27 Jun 2018 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Photon Release of Eclipse IDE Ships With Full Rust Support</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/DKCgOrGZClE/20180627_new-photon-release-of-eclipse-ide-ships-with-full-rust-support.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/DKCgOrGZClE/20180627_new-photon-release-of-eclipse-ide-ships-with-full-rust-support.php</link>
	<description>The Eclipse Foundation today announced the Eclipse Photon simultaneous release.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/DKCgOrGZClE&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 27 Jun 2018 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.10 Released!</title>
	<guid isPermaLink="false">http://www.eclipse.org/webtools/news.php#permalink184</guid>
	<link>http://eclipse.org/webtools/releases/3.10</link>
	<description>&lt;div&gt;
      Web Tools Platform 3.10 has been released!  &lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt; and update can be performed using the
      &lt;a href=&quot;http://download.eclipse.org/releases/photon/&quot;&gt;Photon Update Site&lt;/a&gt; or through the &lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;.
      Release 3.10 is included in the Photon
          &lt;a href=&quot;https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/photonr&quot;&gt;Eclipse IDE for Java EE Developers&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/downloads/packages/eclipse-ide-javascript-and-web-developers/photonr&quot;&gt;Eclipse IDE for JavaScript and Web Developers&lt;/a&gt;, with selected portions also included in &lt;a href=&quot;http://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;.  Adopters can download &lt;a href=&quot;http://download.eclipse.org/webtools/downloads/&quot;&gt;the R3.10 build itself&lt;/a&gt; directly.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/webtools/news.php#permalink184&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 27 Jun 2018 10:00:00 +0000</pubDate>
</item>
<item>
	<title>Vladimir Piskarev: Eclipse Handly 1.0 Released</title>
	<guid isPermaLink="false">http://pisv.wordpress.com/?p=699</guid>
	<link>https://pisv.wordpress.com/2018/06/27/eclipse-handly-1-0-released/</link>
	<description>&lt;p&gt;We are very pleased to announce the availability of Eclipse &lt;a href=&quot;https://www.eclipse.org/handly&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Handly&lt;/a&gt; &lt;a href=&quot;https://projects.eclipse.org/projects/technology.handly/releases/1.0&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;1.0&lt;/a&gt; release. Simultaneously, Handly has graduated from incubation and is now considered a mature project at the Eclipse Foundation. Thanks to everyone involved with the project, especially to our early &lt;a href=&quot;https://wiki.eclipse.org/Handly/Adopters&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;adopters&lt;/a&gt;, who have been successfully using Handly in their products for quite a long time! And thanks to everyone interested in the project; perhaps now it is a good time to put Handly to use for you!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.eclipse.org/Handly/New_and_Noteworthy/1.0&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;New and Noteworthy&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wiki.eclipse.org/Handly/Migration/1.0&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Migration Guide&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://projects.eclipse.org/projects/technology.handly/downloads&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Downloads&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Handly Team&lt;/p&gt;</description>
	<pubDate>Wed, 27 Jun 2018 09:51:55 +0000</pubDate>
</item>
<item>
	<title>Nikhil Nanivadekar: star_fx the font for code is Consolas, with a custom color scheme written by one of the maintainers…</title>
	<guid isPermaLink="false">https://medium.com/p/6ed170e7bcfe</guid>
	<link>https://medium.com/@nikhilnanivadekar/star-fx-the-font-for-code-is-consolas-with-a-custom-color-scheme-written-by-one-of-the-maintainers-6ed170e7bcfe?source=rss-4285d8a2ca86------2</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://medium.com/u/13552602884c&quot;&gt;star_fx&lt;/a&gt; the font for code is Consolas, with a custom color scheme written by one of the maintainers of Eclipse Collections.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=6ed170e7bcfe&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 26 Jun 2018 16:05:54 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: Eclipse Insight on Building Modeling Tools in Munich on September 3rd</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=39654</guid>
	<link>https://eclipsesource.com/blogs/2018/06/25/register-now-for-the-first-eclipse-insight-on-building-modeling-tools-in-munich-on-september-3rd/</link>
	<description>&lt;p&gt;&lt;b&gt;We are happy to announce the first Eclipse Insight on Building Modeling Tools in Munich, on September 3rd (5.30 pm – 9 pm), registration see &lt;/b&gt;&lt;a href=&quot;https://www.eventbrite.de/e/eclipse-insight-building-modeling-tools-tickets-45894598981&quot;&gt;&lt;b&gt;here&lt;/b&gt;&lt;/a&gt;&lt;b&gt;.&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;What is an Eclipse Insight?&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse DemoCamps in Munich have always been a great success and we therefore want to continue organizing Eclipse events in Munich. Nevertheless, we were watching the feedback given by attendees and want to improve. One frequent feedback was the on-going diversification of the Democamps in terms of topics. Due to the broadened scope of the Eclipse ecosystem, new topics such as IoT, web tooling or working groups were mixed with traditional topics like modeling or IDE improvements. While it is always great to learn about a variety of topics, we observed that more and more people wished for a more specific focus. Therefore, to address this feedback, we will came up with this new focused format of an Eclipse Insight.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Like an Eclipse DemoCamp, an Eclipse Insight is a collaborative event featuring technical talks and demonstrations from the Eclipse community. It will also be for free. The important change is that we the topic of the event will be more focused on a certain technology area of the Eclipse ecosystem. &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Insight: Building Modeling Tools&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The first Eclipse Insight will be on Building Modeling Tools in Munich, on September 3rd (5.30 pm – 9 pm).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The ever increasing complexity of today’s business domains requires efficient abstractions to empower and support individuals in managing and maintaining their complex solutions. For this purpose, modeling has been successfully adopted in various domains, e.g.: Software engineering, Engineering or Finance. The goal of the event is to provide a technical overview and share experiences about frameworks, technologies, best practises and design decisions for implementing custom tools for engineers and domain experts.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A special focus will be on the long-term protection of investments in Modeling Tools in times of technology changes, especially regarding web technologies. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In the first part, there will be expert talks and demos about building a modeling tool based on the well-proven Eclipse platform. In the second part, we will give an outlook on how those tools can be migrated or directly implemented based on web technologies (e.g. Eclipse Theia and Eclipse Che). All speakers will be available for detailed questions and discussions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The agenda will cover the following topics, the detailed agenda will follow on the event page:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Building modeling tools with EMF&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Web-based modeling tools&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Declarative UIs&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Migrating Modeling tools to the web&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Model Versioning and Migration &lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Building UML-based tools&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Registration is mandatory, as seats are limited, please use &lt;/span&gt;&lt;a href=&quot;https://www.eventbrite.de/e/eclipse-insight-building-modeling-tools-tickets-45894598981&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this link&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The event is free of charge including drinks and snacks.&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 25 Jun 2018 13:30:09 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: EC by Example: Min and Max</title>
	<guid isPermaLink="false">https://medium.com/p/667ad7cc7fbc</guid>
	<link>https://medium.com/@donraab/ec-by-example-min-and-max-667ad7cc7fbc?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Learn how to find the minimum and maximum values in a collection using &lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*FA3tSkvds_PefeSXi3J7RA.png&quot; /&gt;Of Max and Min&lt;/figure&gt;&lt;h3&gt;How do you find the min and max of a collection?&lt;/h3&gt;&lt;p&gt;If you have a collection that contains &lt;em&gt;Comparable&lt;/em&gt; values, you can simply use &lt;em&gt;min&lt;/em&gt; and &lt;em&gt;max&lt;/em&gt; with no parameters.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void theMinAndTheMax()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;String&amp;gt; alphabet = &lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;a&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;b&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;c&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;d&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;e&quot;&lt;/strong&gt;);&lt;/pre&gt;&lt;pre&gt;    String max = alphabet.max();&lt;br /&gt;    String min = alphabet.min();&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;e&quot;&lt;/strong&gt;, max);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;a&quot;&lt;/strong&gt;, min);&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Using Comparators&lt;/h3&gt;&lt;p&gt;Alternatively, there are forms of &lt;em&gt;min&lt;/em&gt; and &lt;em&gt;max&lt;/em&gt; that take a &lt;em&gt;Comparator&lt;/em&gt; as a parameter.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void theComparators()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;String&amp;gt; alphabet =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;a&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;b&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;c&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;d&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;e&quot;&lt;/strong&gt;);&lt;/pre&gt;&lt;pre&gt;    String max = alphabet.max(Comparators.&lt;em&gt;reverseNaturalOrder&lt;/em&gt;());&lt;br /&gt;    String min = alphabet.min(Comparators.&lt;em&gt;reverseNaturalOrder&lt;/em&gt;());&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;a&quot;&lt;/strong&gt;, max);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;e&quot;&lt;/strong&gt;, min);&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Using minBy and maxBy&lt;/h3&gt;&lt;p&gt;There are methods named &lt;em&gt;minBy&lt;/em&gt; and &lt;em&gt;maxBy&lt;/em&gt; which take a &lt;em&gt;Function&lt;/em&gt; as a parameter. The &lt;em&gt;Function&lt;/em&gt; is turned into a &lt;em&gt;Comparator&lt;/em&gt; for you.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void byTheBy()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;String&amp;gt; strings =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;22&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;333&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;4444&quot;&lt;/strong&gt;);&lt;/pre&gt;&lt;pre&gt;    String max = strings.maxBy(String::length);&lt;br /&gt;    String min = strings.minBy(String::length);&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;4444&quot;&lt;/strong&gt;, max);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, min);&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Getting min and max using SummaryStatistics&lt;/h3&gt;&lt;p&gt;There are methods on &lt;em&gt;RichIterable&lt;/em&gt; that are prefixed with &lt;em&gt;summarize&lt;/em&gt; that return an appropriate instance of &lt;em&gt;SummaryStatistics&lt;/em&gt;. The three &lt;em&gt;SummaryStatistics&lt;/em&gt; types (Int, Long and Double) added in Java 8 have the methods &lt;em&gt;getMin&lt;/em&gt; and &lt;em&gt;getMax&lt;/em&gt;, which allow you to calculate the &lt;em&gt;min&lt;/em&gt; and &lt;em&gt;max&lt;/em&gt; in a single iteration. The &lt;em&gt;summarize&lt;/em&gt; methods take a primitive &lt;em&gt;Function&lt;/em&gt; as a parameter. There are four &lt;em&gt;summarize&lt;/em&gt; methods (with a suffix of &lt;em&gt;Int&lt;/em&gt;, &lt;em&gt;Float&lt;/em&gt;, &lt;em&gt;Long&lt;/em&gt; and &lt;em&gt;Double)&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void theStatistics()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; alphabet =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(2, -3, 4, -5);&lt;/pre&gt;&lt;pre&gt;    IntSummaryStatistics stats = &lt;br /&gt;            alphabet.summarizeInt(i -&amp;gt; i * i);&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(4, stats.getMin());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(25, stats.getMax());&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Primitive min and max&lt;/h3&gt;&lt;p&gt;Any primitive collection can give you the &lt;em&gt;min&lt;/em&gt; and &lt;em&gt;max&lt;/em&gt; values. The methods &lt;em&gt;min&lt;/em&gt; and &lt;em&gt;max&lt;/em&gt; will throw an &lt;em&gt;Exception&lt;/em&gt; if the collection is empty. You can specify a default value to protect against the case of a collection being empty using &lt;em&gt;minIfEmpty&lt;/em&gt; and &lt;em&gt;maxIfEmpty&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void primitiveMaxAndMin()&lt;br /&gt;{&lt;br /&gt;    String string =&lt;br /&gt;            (&lt;strong&gt;&quot;The quick brown fox &quot; &lt;/strong&gt;+&lt;br /&gt;                    &lt;strong&gt;&quot;jumps over the lazy dog.&quot;&lt;/strong&gt;).toLowerCase();&lt;br /&gt;    CharList chars =&lt;br /&gt;            Strings.&lt;em&gt;asChars&lt;/em&gt;(string).select(Character::&lt;em&gt;isLetter&lt;/em&gt;);&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;'a'&lt;/strong&gt;, chars.min());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;'z'&lt;/strong&gt;, chars.max());&lt;/pre&gt;&lt;pre&gt;    CharList emptyChars = Strings.&lt;em&gt;asChars&lt;/em&gt;(&lt;strong&gt;&quot;&quot;&lt;/strong&gt;);&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;'a'&lt;/strong&gt;, emptyChars.minIfEmpty(&lt;strong&gt;'a'&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;'z'&lt;/strong&gt;, emptyChars.maxIfEmpty(&lt;strong&gt;'z'&lt;/strong&gt;));&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Primitive summaryStatistics&lt;/h3&gt;&lt;p&gt;If you have a primitive Iterable, you can call &lt;em&gt;summaryStatistics&lt;/em&gt; directly on it. The method &lt;em&gt;summaryStatistics&lt;/em&gt; will return either an &lt;em&gt;Int&lt;/em&gt;, &lt;em&gt;Long&lt;/em&gt;, or &lt;em&gt;DoubleSummaryStatistics&lt;/em&gt; instance. For &lt;em&gt;byte&lt;/em&gt;, &lt;em&gt;char&lt;/em&gt;, &lt;em&gt;short&lt;/em&gt; and &lt;em&gt;float &lt;/em&gt;iterables, this will result in a widening of the type. As you can see below, &lt;em&gt;summaryStatistics&lt;/em&gt; for a &lt;em&gt;CharList&lt;/em&gt; returns an &lt;em&gt;IntSummaryStatistics &lt;/em&gt;instance.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void primitiveSummaryStatistics()&lt;br /&gt;{&lt;br /&gt;    String string =&lt;br /&gt;            (&lt;strong&gt;&quot;The quick brown fox &quot; &lt;/strong&gt;+&lt;br /&gt;                    &lt;strong&gt;&quot;jumps over the lazy dog.&quot;&lt;/strong&gt;).toLowerCase();&lt;br /&gt;    CharList chars =&lt;br /&gt;            Strings.&lt;em&gt;asChars&lt;/em&gt;(string).select(Character::&lt;em&gt;isLetter&lt;/em&gt;);&lt;/pre&gt;&lt;pre&gt;    IntSummaryStatistics stats = chars.summaryStatistics();&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;'a'&lt;/strong&gt;, stats.getMin());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;'z'&lt;/strong&gt;, stats.getMax());&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Optional min and max&lt;/h3&gt;&lt;p&gt;The &lt;em&gt;min&lt;/em&gt; and &lt;em&gt;max&lt;/em&gt; methods will throw an &lt;em&gt;Exception&lt;/em&gt; if the collection is empty. You can protect against this by using the methods named &lt;em&gt;minOptional&lt;/em&gt; and &lt;em&gt;maxOptional&lt;/em&gt;. There are also optional forms for &lt;em&gt;maxBy&lt;/em&gt; and &lt;em&gt;minBy&lt;/em&gt; named &lt;em&gt;maxByOptional&lt;/em&gt; and &lt;em&gt;minByOptional&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void theOptionals()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;String&amp;gt; alphabet = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;/pre&gt;&lt;pre&gt;    Optional&amp;lt;String&amp;gt; max =&lt;br /&gt;            alphabet.maxOptional(Comparators.&lt;em&gt;naturalOrder&lt;/em&gt;());&lt;br /&gt;    Optional&amp;lt;String&amp;gt; min =&lt;br /&gt;            alphabet.minOptional(Comparators.&lt;em&gt;naturalOrder&lt;/em&gt;());&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertFalse&lt;/em&gt;(max.isPresent());&lt;br /&gt;    Assert.&lt;em&gt;assertFalse&lt;/em&gt;(min.isPresent());&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;APIs covered in the examples&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#min--&quot;&gt;min&lt;/a&gt; / &lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#max--&quot;&gt;max&lt;/a&gt; — find the minimum or maximum value in a collection of Comparable values.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#min-java.util.Comparator-&quot;&gt;min&lt;/a&gt; / &lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#max-java.util.Comparator-&quot;&gt;max&lt;/a&gt; with Comparator — find the minimum or maximum value in a collection using the specified Comparator.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#minBy-org.eclipse.collections.api.block.function.Function-&quot;&gt;minBy&lt;/a&gt; / &lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#maxBy-org.eclipse.collections.api.block.function.Function-&quot;&gt;maxBy&lt;/a&gt; — find the minimum or maximum value in a collection using the specified Function.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#summarizeInt-org.eclipse.collections.api.block.function.primitive.IntFunction-&quot;&gt;summarizeInt&lt;/a&gt; — returns an &lt;em&gt;IntSummaryStatistics&lt;/em&gt; by applying the specified &lt;em&gt;IntFunction&lt;/em&gt; to each element of the collection. There are also forms of &lt;em&gt;summarize&lt;/em&gt; with a suffix of &lt;em&gt;Float&lt;/em&gt;, &lt;em&gt;Long&lt;/em&gt; or &lt;em&gt;Double&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/CharIterable.html#min--&quot;&gt;min&lt;/a&gt; / &lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/CharIterable.html#max--&quot;&gt;max&lt;/a&gt; (CharList)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/CharIterable.html#minIfEmpty-char-&quot;&gt;minIfEmpty&lt;/a&gt; / &lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/CharIterable.html#maxIfEmpty-char-&quot;&gt;maxIfEmpty&lt;/a&gt; (CharList)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#minOptional-java.util.Comparator-&quot;&gt;minOptional&lt;/a&gt; / &lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#maxOptional-java.util.Comparator-&quot;&gt;maxOptional&lt;/a&gt; with Comparator — find the minimum or maximum value in a collection using the specified Comparator returning an Optional value.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/CharIterable.html#summaryStatistics--&quot;&gt;summaryStatistics&lt;/a&gt; — returns an appropriate &lt;em&gt;SummaryStatistics&lt;/em&gt; instance for the primitive Iterable type.&lt;/li&gt;&lt;li&gt;Strings.&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/impl/factory/Strings.html#asChars-java.lang.String-&quot;&gt;asChars&lt;/a&gt; — creates a &lt;em&gt;CharAdapter&lt;/em&gt; wrapping the specified String.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Check out this &lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/api-design&quot;&gt;presentation&lt;/a&gt; to learn more about the origins, design and evolution of the Eclipse Collections API.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=667ad7cc7fbc&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 24 Jun 2018 18:00:12 +0000</pubDate>
</item>
<item>
	<title>Nikhil Nanivadekar: Multimap — How it works</title>
	<guid isPermaLink="false">https://medium.com/p/a3430f549d35</guid>
	<link>https://medium.com/oracledevs/multimap-how-it-works-a3430f549d35?source=rss-4285d8a2ca86------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/proxy/1*d1FllHC2H0SXv7CK-aV_iQ.png&quot; /&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;https://www.eclipse.org/collections/&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;In my previous blogs I explained how Eclipse Collections &lt;a href=&quot;https://medium.com/oracledevs/unifiedmap-how-it-works-48af0b80cb37&quot;&gt;UnifiedMap&lt;/a&gt; and &lt;a href=&quot;https://medium.com/oracledevs/unifiedset-the-memory-saver-25b830745959&quot;&gt;UnifiedSet&lt;/a&gt; works. In this blog, we will take a look at &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/multimap/Multimap.java&quot;&gt;Multimap&lt;/a&gt; or Multi-valued Map in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;According to &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Map.html&quot;&gt;Javadoc of Map&lt;/a&gt;, a Map is an object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value. However, we come across scenarios wherein more than one value has to be mapped to a key. In such scenarios where multiple values need to be mapped to a single key, we end up creating a Map with a single key but a collection of values. It is important that the semantics of the value collection are maintained viz.:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;List of values will behave as a List: allows duplicates, maintain order.&lt;/li&gt;&lt;li&gt;Set of values will behave as a Set: hashed data structure, contains unique elements.&lt;/li&gt;&lt;li&gt;Bag of values will behave as a &lt;a href=&quot;https://medium.com/oracledevs/unifiedset-the-memory-saver-25b830745959&quot;&gt;Bag&lt;/a&gt;: hashed data structure, allows duplicates.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Eclipse Collections provides Multimaps for all 3 types of value collections: &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/multimap/list/ListMultimap.html&quot;&gt;ListMultimap&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/multimap/set/SetMultimap.html&quot;&gt;SetMultimap&lt;/a&gt; (Sorted, Unsorted) and &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/multimap/bag/BagMultimap.html&quot;&gt;BagMultimap&lt;/a&gt; (Sorted, Unsorted). &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/multimap/MutableMultimap.html&quot;&gt;Mutable&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/multimap/ImmutableMultimap.html&quot;&gt;Immutable&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/impl/multimap/AbstractSynchronizedMultimap.html&quot;&gt;Synchronized&lt;/a&gt; and MultiReader variants of all these Multimaps are available in Eclipse Collections.&lt;/p&gt;&lt;p&gt;Let us consider an Item object and an Item data set as below. The Item data set consists of three fruits, two vegetables and one meat.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*szYFKUhjV2ezloI0PxxFpA.png&quot; /&gt;Item.java&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*6cN9Vge4NJFxlt1gN7tEiA.png&quot; /&gt;Item data set for tests.&lt;/figure&gt;&lt;p&gt;Let us see how we can group the list of items:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the JDK we can use the streams API with Collectors.groupingBy() to get a Map&amp;lt;String, List&amp;lt;Item&amp;gt;&amp;gt; in this case.&lt;/li&gt;&lt;li&gt;Eclipse Collections provides the groupBy() API which returns an Eclipse Collections Multimap . Since we are calling groupBy() on a MutableList we will get a ListMultimap&amp;lt;String, Item&amp;gt;.&lt;/li&gt;&lt;/ol&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*V5LWmUOJDHVL08_DvinGpg.png&quot; /&gt;JDK Map&amp;lt;String, List&amp;lt;Item&amp;gt;&amp;gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*bVgHqEuFM1POUqQ0aXrtIQ.png&quot; /&gt;Eclipse Collections ListMultimap&amp;lt;String, Item&amp;gt;&lt;/figure&gt;&lt;p&gt;We need to use the overloaded methods which accept a target value collection to get a desired type of Multimap, because, both JDK and Eclipse Collections have covariant overrides. The covariant override contract ensures that a groupBy() operation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;On a List returns a ListMultimap&lt;/li&gt;&lt;li&gt;On a Set returns a SetMultimap&lt;/li&gt;&lt;li&gt;On a Bag returns a BagMultimap.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let us see them side by side:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*OksquvpDNDwLZyaVjYJPWA.png&quot; /&gt;JDK vs Eclipse Collections Multimap construction from top to bottom: ListMultimap, SetMultimap, BagMultimap.&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Eclipse Collections Multimaps Architecture:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Multimaps are backed up by UnifiedMap, which is the more &lt;a href=&quot;https://medium.com/oracledevs/unifiedmap-how-it-works-48af0b80cb37&quot;&gt;memory efficient Map&lt;/a&gt; included in Eclipse Collections. The overall architecture for a Multimap without collisions can be seen below, the strategy for handling collisions is same as that of UnifiedMap.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*eLUekXw-RbqidCmmXr2rHQ.png&quot; /&gt;Eclipse Collections Multimap Architecture Schematic Diagram&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Adding and Removing elements from Eclipse Collections MutableMultimap:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Eclipse Collections MutableMultimap has mutating operations like put(), putAll(), remove(), removeAll(). There are a few interesting aspects of these mutating methods, let us look at each one:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;put(), putAll() : These methods are interesting when called for a key which does not exist in the Multimap. The Eclipse Collections implementation handles these cases by creating a new Collection and then adding the key and value. In the example below, there is no element with key=beverage. When we add key-value = beverage-milk, internally Eclipse Collections will create an empty List and then add to the MutableMultimap. Any further additions of values to key=beverage, the new values are added to the list. In case of the JDK implementation of Map&amp;lt;K, List&amp;lt;V&amp;gt;&amp;gt; we have to handle the empty List creation.&lt;/li&gt;&lt;/ol&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*qbPaNMAczftGSchvxPYQ0w.png&quot; /&gt;MutableMultimap.put() operation in Eclipse Collections.&lt;/figure&gt;&lt;p&gt;2. remove(), removeAll() : These methods are interesting when the result of removal will leave an empty collection. The Eclipse Collections implementation ensures that there will not exists a key without a non-empty collection. In cases where the last value is removed for a particular key, the key as well is removed. This ensures that the Multimap will contain only those keys which have a non-empty value collection.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*WNG9_j4HrUfRSv0X5p7qhA.png&quot; /&gt;MutableMultimap.remove() operation in Eclipse Collections.&lt;/figure&gt;&lt;p&gt;The Eclipse Collections &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;Multimap&lt;/a&gt; has a rich and an intuitive API specifically designed to help with iteration patterns pertaining to Multimap like keyBag(), keySet(), forEachKey(), forEachValue(), forEachKeyValue(), forEachKeyMultiValues(), selectKeysValues(), rejectKeysValues(), selectKeysMultiValues(), rejectKeysMultiValues(), collectKeysValues(), collectValues() to name a few.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Memory Footprint (lower number the better)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Below are few memory footprint comparisons between JDK 1.8 HashMap and Eclipse Collections Multimap. This shows the total memory footprint including the constituents of the data structures.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*MOkyA4eqRn2hsh_KjIP2nw.png&quot; /&gt;Memory Comparison: EC ListMultimap&amp;lt;Integer, Integer&amp;gt; and JDK HashMap&amp;lt;Integer, List&amp;lt;Integer&amp;gt;&amp;gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*N5Evxegg2Q97Lbz4GWFMog.png&quot; /&gt;Memory Comparison: EC ListMultimap&amp;lt;String, String&amp;gt; and JDK HashMap&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*m8i2X7u_9MGBml4rziMaqg.png&quot; /&gt;Memory Comparison: EC SetMultimap&amp;lt;Integer, Integer&amp;gt; and JDK HashMap&amp;lt;Integer, Set&amp;lt;Integer&amp;gt;&amp;gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*s9kOQ9pIbABbDAPLTIjMsw.png&quot; /&gt;Memory Comparison: EC SetMultimap&amp;lt;String, String&amp;gt; and JDK HashMap&amp;lt;String, Set&amp;lt;String&amp;gt;&amp;gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*hXmW4oDqTVi1xriqeCvfHg.png&quot; /&gt;Memory Comparison: EC BagMultimap&amp;lt;Integer, Integer&amp;gt; and JDK HashMap&amp;lt;Integer, Map&amp;lt;Integer, Long&amp;gt;&amp;gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*bYY_SaQiuCXYuJmSdpyr3A.png&quot; /&gt;Memory Comparison: EC BagMultimap&amp;lt;String, String&amp;gt; and JDK HashMap&amp;lt;String, Map&amp;lt;String, Long&amp;gt;&amp;gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Eclipse Collections provides Multimap implementations with List, Set and Bag as backing collections.&lt;/li&gt;&lt;li&gt;Eclipse Collections provides an intuitive API to create a Multimap.&lt;/li&gt;&lt;li&gt;Eclipse Collections Multimap has a Multimap specific API which handles initialization and eviction of backing collections for you.&lt;/li&gt;&lt;li&gt;Eclipse Collections Multimap API is intuitive for use and the API is kept similar to the API provided by Maps.&lt;/li&gt;&lt;li&gt;Eclipse Collections Multimaps consistently have a smaller memory footprint compared to the equivalent JDK Multimap implementation. Eclipse Collections SetMultimap memory footprint is ~55% that of JDK SetMultimap memory footprint.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;em&gt;Show your support &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/stargazers&quot;&gt;&lt;em&gt;star us on GitHub&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Eclipse Collections Resources:&lt;/strong&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; comes with it’s own implementations of &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/list/mutable/FastList.html&quot;&gt;List&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/set/mutable/UnifiedSet.html&quot;&gt;Set&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/map/mutable/UnifiedMap.html&quot;&gt;Map&lt;/a&gt;. It also has additional data structures like &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;Multimap&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt; and an entire Primitive Collections hierarchy. Each of our collections have a rich API for commonly required iteration patterns.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Website&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Source code on GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/docs/guide.md#eclipse-collections-reference-guide&quot;&gt;Reference Guide&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=a3430f549d35&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/multimap-how-it-works-a3430f549d35&quot;&gt;Multimap — How it works&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Sat, 23 Jun 2018 18:48:20 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: Get the Scoop, a Homebrew for Windows</title>
	<guid isPermaLink="false">https://cdtdoug.ca/2018/06/23/get-the-scoop</guid>
	<link>https://cdtdoug.ca/2018/06/23/get-the-scoop.html</link>
	<description>&lt;p&gt;When I came back to QNX over six years ago (wow, it’s been that long?), they offered a choice of one of the the three main environments. I was excited to see what all the hype was about and picked Mac. I really enjoyed it. It provided a great blend of user experience with the power of Unix and the shell underneath. The trackpad on the MBP is amazing. It’s under rated how much a productivity enhancer that is.&lt;/p&gt;

&lt;p&gt;But eventually that machine got old and beat up and it was time for a new one. I had my fun with the Mac, but it’s not what’s used by many of the users of the tools I build. In the embedded space you see a pretty solid mix of Windows and Linux. And I was interested to see how much better Windows 10 was and whether it could overcome it’s really crappy command line environment. So that’s where I went.&lt;/p&gt;

&lt;p&gt;I knew Eclipse works well there. It was invented there and still looks like a big MFC app. But selecting a shell environment revealed a lot of choice.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mingw.org&quot;&gt;MSYS&lt;/a&gt;. This was the environment I used the last time I was on Windows. It came as the shell for the MinGW toolchain. But it seems to have died.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cygwin.org&quot;&gt;CYGWIN&lt;/a&gt;. This environment bugs me a lot as it maps Windows paths to Unix paths and confuses the hell out of native tools, like Eclipse CDT.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://msys2.org&quot;&gt;MSYS2&lt;/a&gt;. This is a pretty rich environment that seems to be an evolution of the old MSYS. It comes with a package manager but the choice of Arch Linux’s pacman is a tough one. It makes it your responsibility to figure out what 32/64-bit host and target combinations of the toolchains and libraries you want to install. But it does have everything, even Qt.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://scoop.sh&quot;&gt;Scoop&lt;/a&gt;. Scoop is a more general package manager and is pretty easy to use. It’s very active and has a good community keeping the tools up to date. And while it has all my favorite tools for building C/C++ apps, it doesn’t have any libraries. But that’s fine, you should be building those yourself anyway to make sure you’re using the same toolchain settings.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chocolatey.org&quot;&gt;Chocolatey&lt;/a&gt;. This is another package manager but at a higher level than Scoop. It’s less focused on being a shell and assumes you’re a Powershell user, which I’m not and barely understand.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;Windows Subsystem for Linux&lt;/a&gt;. Also know as Bash for Windows, it provide a Linux emulation layer and gives you access to real Linux distributions. You can use it to access you’re files outside of it’s Linux emulated file system, but it’s pretty weird and not everything works.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For now, I’ve gone with Scoop. I really like it because I also use it to install other tools I use like docker and kubectl for my test cluster, and maven and python and svn, pretty much any command line tool I need. And it manages the PATH for you so all the tools are available in native apps without any magic, including the Windows command line if you’re stuck for anything else. But most of the time, I use busybox which gives me all the Unix tools I need including a not quite bash compatible shell, but that’s fine. I do wish it had C/C++ libraries like SDL or Qt, but it is open source and extensible so I could just do this myself.&lt;/p&gt;

&lt;p&gt;The good news is that I’m finding myself very productive on Windows. I have a great shell environment with Scoop, good editors with emacs and Visual Studio Code, and Eclipse which still works best on Windows, and all the Windows apps I need. I don’t miss my Mac at all.&lt;/p&gt;</description>
	<pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Benjamin Cabe: Eclipse Kura on Steroids with UPM and Eclipse OpenJ9</title>
	<guid isPermaLink="false">https://blog.benjamin-cabe.com/?p=3216</guid>
	<link>http://feedproxy.google.com/~r/benjamin-cabe-planet-eclipse/~3/vZ8M47DyuS8/eclipse-kura-on-steroids-with-upm-and-eclipse-openj9</link>
	<description>&lt;p&gt;&lt;i&gt;So it’s been a while since the last time I blogged about a cool IoT demo… Sorry about that! On the bright side, this post covers a couple projects that are really, really, neat so hopefully, this will help you forgive me for the wait! &lt;/i&gt;&lt;img alt=&quot;🙃&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/1f643.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;UP Squared Grove IoT Development Kit&lt;/h2&gt;
&lt;p&gt;At the end of last year, a new high-performance IoT developer kit was &lt;a href=&quot;https://software.intel.com/en-us/articles/announcing-arduino-create-support-for-intel-based-platforms-and-the-up-squared-grove-iot&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;announced&lt;/a&gt;. Built on top of the &lt;a href=&quot;http://www.up-board.org/upsquared/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;UP Squared board&lt;/a&gt;, it features an Intel Apollo lake x86-64 processor, plenty of GPIOs, two Ethernet interfaces, USB 3.0 ports, an Altera MAX 10 FPGA, and more. You can &lt;a href=&quot;https://www.seeedstudio.com/category/UP%C2%B2-Grove-IoT-Development-Kit-p-2994.html&quot;&gt;get the kit&lt;/a&gt; from Seeed Studio for USD 249.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/bazaar613193_img_4445a.jpg&quot;&gt;&lt;img alt=&quot;The UP Squared Grove IoT Development Kit&quot; class=&quot;aligncenter wp-image-3221 size-large&quot; height=&quot;356&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/bazaar613193_img_4445a-1024x768.jpg&quot; width=&quot;474&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course, it wouldn’t be a &lt;i&gt;&lt;a href=&quot;https://www.seeedstudio.com/category/Grove-c-1003.html&quot;&gt;Grove&lt;/a&gt;&lt;/i&gt; kit without the Grove &lt;a href=&quot;https://www.seeedstudio.com/GrovePi%2B-p-2241.html&quot;&gt;shield&lt;/a&gt; that can be attached on top of the board to simplify the connection to a wide variety of sensors and actuators (and there’s actually a few of them in the kit).&lt;/p&gt;
&lt;h2&gt;Running Eclipse Kura on the UP Squared board&lt;/h2&gt;
&lt;p&gt;Enough with the hardware! With all this horsepower, it is of course very tempting to run Eclipse Kura on this. The UP Squared being based on an Intel x86-64 processor, it is incredibly easy to start by replacing the default OpenJDK JVM by &lt;b&gt;&lt;a href=&quot;https://www.eclipse.org/openj9/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse OpenJ9&lt;/a&gt;&lt;/b&gt;. Here’s your two-step tutorial to get Eclipse OpenJ9 and Eclipse Kura running on your board:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download a ready-to-use build from &lt;a href=&quot;https://adoptopenjdk.net/nightly.html?variant=openjdk9-openj9&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;AdoptOpenJDK&lt;/a&gt; and use the &lt;a href=&quot;https://blog.benjamin-cabe.com/2016/04/05/installing-the-zulu-open-source-java-virtual-machine-on-raspberry-pi&quot;&gt;update-alternatives utility&lt;/a&gt; to set OpenJ9 as your default java executable.&lt;/li&gt;
&lt;li&gt;Get the &lt;a href=&quot;https://ci.eclipse.org/kura/job/kura-develop/lastSuccessfulBuild/artifact/kura/distrib/target/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;latest nightly build of the Kura UP Squared Debian package&lt;/a&gt; from Jenkins, and install it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In case you are wondering how much faster OpenJ9 is compared to OpenJDK or Oracle’s JVMs, here’s a quick comparison of the startup time of Eclipse Kura on the UP Squared:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/kura-startup-time.png&quot;&gt;&lt;img alt=&quot;Eclipse Kura start-up time on Intel UP Squared Grove kit&quot; class=&quot;aligncenter wp-image-3230 size-large&quot; height=&quot;146&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/kura-startup-time-1024x315.png&quot; width=&quot;474&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;UPM&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;UPM logo&quot; class=&quot;size-full wp-image-3236 alignright&quot; height=&quot;71&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/logo.png&quot; width=&quot;288&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://upm.mraa.io/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;UPM&lt;/a&gt;&lt;/b&gt; is a set of libraries for interacting with sensors and actuators in a cross-platform, cross-OS, language-agnostic, way.&lt;/p&gt;
&lt;p&gt;There are &lt;b&gt;over 400 sensors &amp;amp; actuators supported in UPM&lt;/b&gt;. Virtually all the “DIY” sensors you can get from SeeedStudio, Adafruit, etc. are supported, but beyond that, UPM also provides support for a wide variety of industrial sensors.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/upm-website.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-3223 size-large&quot; height=&quot;302&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/upm-website-1024x653.png&quot; width=&quot;474&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to Eclipse &lt;b&gt;Kura Wires&lt;/b&gt; and &lt;a href=&quot;https://eclipse.github.io/kura/devices/1-driver-and-assets.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;the underlying concept of “Drivers” and “Assets”&lt;/a&gt;, Kura provides a way to access physical assets in a generic way.&lt;/p&gt;
&lt;p&gt;In the next section, we will see a proof-of-concept of UPM libraries being wrapped as Kura “drivers” in order to make it really simple to interact with the 400+ kind of sensors/actuators supported by UPM.&lt;/p&gt;
&lt;h2&gt;Integrating UPM in Kura Wires&lt;/h2&gt;
&lt;p&gt;UPM drivers are small native C/C++ libraries that expose bindings in several programming languages, including Java, and therefore calling UPM drivers from Kura is pretty simple.&lt;/p&gt;
&lt;p&gt;The only thing you need is a few JARs for UPM itself (and for MRAA, the framework that is supporting it), the JARs for the driver(s) of the particular sensor(s) you want to use, and the associated native libraries (&lt;code&gt;.so&lt;/code&gt; files) for the above. As you may know, OSGi makes it pretty easy to package native libraries that may go alongside Java/JNI libraries, so there is really no difficulty there.&lt;/p&gt;
&lt;p&gt;In order for the UPM drivers to be accessible from Kura Wires, and to expose “channels” corresponding to the methods available on them, they need to be bundled as &lt;a href=&quot;http://download.eclipse.org/kura/docs/api/3.2.0/apidocs/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Kura Drivers&lt;/a&gt;. This is also a pretty straightforward task, and while I created the driver for only a few sensor types out of the 400+ supported in UPM, I am pretty confident that Kura drivers can be automatically generated from UPM drivers.&lt;/p&gt;
&lt;p&gt;You can find the final result on my Github: &lt;a href=&quot;https://github.com/kartben/org.intellabs.upm&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://github.com/kartben/org.intellabs.upm&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;See it in action!&lt;/h2&gt;
&lt;p&gt;So what do we end up getting, and why should you care? Just check out the video below and see for yourself!&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;L’article &lt;a href=&quot;https://blog.benjamin-cabe.com/2018/06/21/eclipse-kura-on-steroids-with-upm-and-eclipse-openj9&quot; rel=&quot;nofollow&quot;&gt;Eclipse Kura on Steroids with UPM and Eclipse OpenJ9&lt;/a&gt; est apparu en premier sur &lt;a href=&quot;https://blog.benjamin-cabe.com&quot; rel=&quot;nofollow&quot;&gt;Benjamin Cabé&lt;/a&gt;.&lt;/p&gt;
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/benjamin-cabe-planet-eclipse/~4/vZ8M47DyuS8&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 21 Jun 2018 10:28:17 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: ECF Photon supports OSGi R7 Async Services - part 2</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-5952899420541319963</guid>
	<link>http://eclipseecf.blogspot.com/2018/06/ecf-photon-supports-osgi-r7-async.html</link>
	<description>In a &lt;a href=&quot;http://eclipseecf.blogspot.com/2018/05/ecf-photon-supports-osgi-async-intent.html&quot;&gt;previous post&lt;/a&gt;, I described a usage of &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html#d0e1407&quot;&gt;OSGi R7's Async Remote Services&lt;/a&gt;.  This specification makes it easy to define, implement and use non-blocking remote services.    ECF's implementation allows the use of pluggable transports...known as &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot;&gt;distribution providers&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Here's a partial list of distribution providers:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://www.eclipse.org/ecf/downloads.php&quot;&gt;R-OSGi&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.eclipse.org/ecf/downloads.php&quot;&gt;ECF generic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/JMS&quot;&gt;JMS/ActiveMQ&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/XmlRpcProvider&quot;&gt;XML-RPC&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/HazelcastProvider&quot;&gt;Hazelcast&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/Mqtt-Provider&quot;&gt;MQTT&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/JaxRSProviders&quot;&gt;Jax-RS Jersey&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/JaxRSProviders&quot;&gt;Jax-RS CXF&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/JGroups&quot;&gt;JavaGroups&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/Py4j-RemoteServicesProvider&quot;&gt;Python.Java (Supports async remote services between Java and Python with protocol buffers serialization)&lt;/a&gt;&lt;br /&gt;&lt;br /&gt; It's also straightforward to creation your own distribution provider, using private or legacy transport and/or serialization.  This can be done by extending one of the distribution providers above or creating a new one.&lt;br /&gt;&lt;br /&gt;Most of these distribution providers have updated &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_Communication_Framework_Project#Tutorials&quot;&gt;examples and/or tutorials&lt;/a&gt;, and many of them now have templates included in the &lt;a href=&quot;https://wiki.eclipse.org/Bndtools_Support_for_Remote_Services_Development&quot;&gt;Bndtools (4.0+) Support&lt;/a&gt; added for Photon.&lt;br /&gt;&lt;br /&gt;Separating the remote service contract from the underlying distribution provider via OSGi remote services allows implementers and consumers to create, debug, and test remote services without being bound to a single transport, while still allowing consistent (specified) runtime behavior.&lt;br /&gt;&lt;br /&gt;For more info and links, please see the &lt;a href=&quot;https://www.eclipse.org/ecf/NewAndNoteworthy.html&quot;&gt;New and Noteworthy&lt;/a&gt;.</description>
	<pubDate>Wed, 20 Jun 2018 18:30:29 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>

</channel>
</rss>
